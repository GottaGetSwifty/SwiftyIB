//
//  StoryboardExtensionsGenerator.swift
//  SwiftyIB
//
//  Created by Paul Fechner on 6/1/18.
//  Copyright Â© 2018 peejweej.inc. All rights reserved.
//

public class StoryboardExtensionsGenerator {
    public static func makeIBTypeExtensions() -> String {
        return """
        ///IBTypeExtensions.swift
        /// Automatically generated by SwiftIB. **DO NOT EDIT**

        import UIKit

        extension UIViewController {

            func performSegue<E: RawRepresentable>(withStringIdentifier stringIdentifier: E,
                sender: Any?) where E.RawValue == String {
                performSegue(withIdentifier: stringIdentifier.rawValue, sender: sender)
            }
            
            func performSegue(with segueIdentifier: SegueIdentifier,
                sender: Any? = nil) {
            
                if segueIdentifier != .none {
                    performSegue(withStringIdentifier: segueIdentifier, sender: sender)
                }
            }
        }

        extension UIStoryboardSegue {

            func getAsStringRawRepresentable<E: RawRepresentable>() -> E? where E.RawValue == String {
            
                if let identifier = self.identifier, let segueIdentifier = E(rawValue: identifier){
                    return segueIdentifier
                }
                else{
                    return nil
                }
            }

            func getSegueIdentifier() -> SegueIdentifier {

            if let identifier = self.identifier,
                let segueIdentifier = SegueIdentifier(rawValue: identifier){
                    return segueIdentifier
                }
                else{
                    return .none
                }
            }
        }
                
        extension IBSegue {
            func perform(sender: Any? = nil) {
                viewController.performSegue(with: identifier, sender: sender)
            }
        }
                
        extension IBScene {
            var storyboardIdentifier: StoryboardIdentifier { 
                return Self.storyboardIdentifier
            }

            var sceneIdentifier: SceneIdentifier { 
                return Self.sceneIdentifier
            }
        }

        extension StoryboardIdentifiable {
            static var storyboard: UIStoryboard {
                return UIStoryboard(name: storyboardIdentifier.rawValue, bundle: nil)
            }
        }

        extension SceneIdentifiable where Self: StoryboardIdentifiable {
            static func makeViewControllerFromStoryboard<T: UIViewController>() -> T {
                return storyboard.makeViewController(with: sceneIdentifier) as! T
            }
        }

        extension UIStoryboard {

            func makeViewController<T: UIViewController>(with identifier: SceneIdentifier) -> T? {
                return instantiateViewController(withIdentifier: identifier.rawValue) as? T
            }
            
            static func makeViewController<T: UIViewController>(storyboard: StoryboardIdentifier, scene: SceneIdentifier) -> T? {
                return UIStoryboard(name: storyboard.rawValue, bundle: nil).makeViewController(with: scene) as? T
            }
        }

        extension UIStoryboard {
            convenience init(identifier: StoryboardIdentifier, bundle: Bundle?) {
                self.init(name: identifier.rawValue, bundle: bundle )
            }
        }

        extension StoryboardIdentifier {
            func makeInitialVC() -> UIViewController {
                return UIStoryboard(identifier: self, bundle: nil).instantiateInitialViewController()!
            }
        }

        """
    }
}
