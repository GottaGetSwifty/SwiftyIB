///IBNibTypes.swift
/// Automatically generated by SwiftyIB. **DO NOT EDIT**
        
import UIKit
        
protocol IBNibCreateable  {
    static var nibName: String { get }
}

extension IBNibCreateable where Self: AnyObject {
    
    static func makeNib(bundle: Bundle) -> UINib {
        return UINib(nibName: nibName, bundle: bundle)
    }
    
    static func makeNib() -> UINib {
        return makeNib(bundle: Bundle(for: self))
    }
}

protocol IBNibIdentifiable: IBNibCreateable {
    static var nibIdentifier: NibIdentifier { get }
}

extension IBNibIdentifiable {
    static var nibName: String {
        return nibIdentifier.rawValue
    }
}

protocol IBReusable {
    static var generatedReuseIdentifier: String { get }
}

protocol IBReusableIdentifiable: IBReusable {
    static var ibReuseIdentifier: ReuseIdentifier { get }
}

extension IBReusableIdentifiable {
    static var generatedReuseIdentifier: String { 
        return ibReuseIdentifier.rawValue
    }
}


protocol NibReusable: IBNibCreateable & IBReusable { }

extension NibReusable where Self: UITableViewHeaderFooterView {
    static var generatedReuseIdentifier: String {
        return String(describing: type(of: self))
    }
}
        
        
extension UITableView {
    
    final func register<T: UITableViewCell>(cellType: T.Type) where T: NibReusable {
        self.register(T.makeNib(), forCellReuseIdentifier: T.generatedReuseIdentifier)
    }
    
    final func register<T: UITableViewHeaderFooterView>(viewType: T.Type) where T: NibReusable {
        self.register(T.makeNib(), forHeaderFooterViewReuseIdentifier: T.generatedReuseIdentifier)
    }
    
    final func register<T: UITableViewCell>(cellType: T.Type) where T: IBReusable {
        self.register(T.self, forCellReuseIdentifier: T.generatedReuseIdentifier)
    }
    
    final func register<T: UITableViewHeaderFooterView>(viewType: T.Type) where T: IBReusable {
        self.register(T.self, forHeaderFooterViewReuseIdentifier: T.generatedReuseIdentifier)
    }
        
        
    func dequeue(with identifier: ReuseIdentifier, for indexPath: IndexPath) -> UITableViewCell{
        return dequeueReusableCell(withIdentifier: identifier.rawValue, for: indexPath)
    }

    func dequeueTyped< T: UITableViewCell>(with identifier: ReuseIdentifier, for indexPath: IndexPath) -> T?{
        return dequeue(with: identifier, for: indexPath) as? T
    }
        
    
    func dequeueHeaderFooter(with identifier: ReuseIdentifier) -> UITableViewHeaderFooterView? {
        return self.dequeueReusableHeaderFooterView(withIdentifier: identifier.rawValue)
    }
    
    func dequeueTypedHeaderFooter<T: UITableViewHeaderFooterView>(with identifier: ReuseIdentifier) -> T? {
        return self.dequeueHeaderFooter(with: identifier) as? T
    }
        
    func dequeue<T: NibReusable>(for cellType: T.Type, indexPath: IndexPath) -> UITableViewCell {
        return dequeueReusableCell(withIdentifier: cellType.generatedReuseIdentifier, for: indexPath)
    }
    
    func dequeueTyped<T: NibReusable, R: UITableViewCell>(for cellType: T.Type, indexPath: IndexPath) -> R? {
        return dequeueReusableCell(withIdentifier: cellType.generatedReuseIdentifier, for: indexPath) as? R
    }
    
    func dequeueHeaderFooter<T: NibReusable>(for cellType: T.Type) -> UIView? {
        return dequeueReusableHeaderFooterView(withIdentifier: cellType.generatedReuseIdentifier)
    }
    
    func dequeueTypedHeaderFooter<T: NibReusable, R: UITableViewHeaderFooterView>(for cellType: T.Type) -> R? {
        return dequeueReusableHeaderFooterView(withIdentifier: cellType.generatedReuseIdentifier) as? R
    }
}

extension UICollectionView {
    
    final func register<T: UICollectionViewCell>(cellType: T.Type) where T: NibReusable {
        self.register(T.makeNib(), forCellWithReuseIdentifier: T.generatedReuseIdentifier)
    }
    
    final func register<T: UICollectionReusableView>(viewType: T.Type, forSupplementaryViewOfKind kindOfView: String) where T: NibReusable {
        self.register(T.makeNib(), forSupplementaryViewOfKind: kindOfView, withReuseIdentifier: T.generatedReuseIdentifier)
    }
    
        
    func dequeueCell(with identifier: ReuseIdentifier, for indexPath: IndexPath) -> UICollectionViewCell{
        return self.dequeueReusableCell(withReuseIdentifier: identifier.rawValue, for: indexPath)
    }

    func dequeueTypedCell< T: UICollectionViewCell>(with identifier: ReuseIdentifier, for indexPath: IndexPath) -> T?{
        return self.dequeueCell(with: identifier, for: indexPath) as? T
    }
        

    func dequeueView(with identifier: ReuseIdentifier, kind elementKind: String, for indexPath: IndexPath) -> UICollectionReusableView{

        return self.dequeueReusableSupplementaryView(ofKind: elementKind, withReuseIdentifier: identifier.rawValue, for: indexPath)
    }
    
    func dequeueTypedView<T: UICollectionReusableView>(with identifier: ReuseIdentifier, kind elementKind: String, for indexPath: IndexPath) -> T? {
        return dequeueView(with: identifier, kind: elementKind, for: indexPath) as? T
    }
}     