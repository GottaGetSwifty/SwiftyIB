//
//  NibExtensionsGenerator.swift
//  SwiftyIB
//
//  Created by Paul Fechner on 9/4/18.
//  Copyright Â© 2018 peejweej.inc. All rights reserved.
//

public class AssetTypesAndExtensionsGenerator {
    public static func makeAssetsTypesAndExtensions() -> String {
        return 
"""
///
/// XCAssetExtensions.swift
///
/// Automatically generated by SwiftyIB. **DO NOT EDIT**
///

import UIKit

extension UIImage {
    
    /// Note that this force unwraps the result
    /// The only case in which this should be nil is if the asset is not in the bundle
    convenience init!(identifier: AssetImageIdentifier) {
        self.init(identifier: identifier, in: nil)
    }
    
    convenience init?(identifier: AssetImageIdentifier, in bundle: Bundle?) {
        self.init(identifier: identifier, in: bundle, compatableWith: nil)
    }
    
    convenience init?(identifier: AssetImageIdentifier, in bundle: Bundle?, compatableWith traits: UITraitCollection?) {
        self.init(named: identifier.rawValue, in: bundle, compatibleWith: traits)
    }
}

extension UIColor {
    
    /// Note that this force unwraps the result
    /// The only case in which this should be nil is if the asset is not in the bundle
    convenience init!(identifier: AssetColorIdentifier) {
        self.init(identifier: identifier, in: nil)
    }
    
    convenience init?(identifier: AssetColorIdentifier, in bundle: Bundle?) {
        self.init(identifier: identifier, in: bundle, compatableWith: nil)
    }
    
    convenience init?(identifier: AssetColorIdentifier, in bundle: Bundle?, compatableWith traits: UITraitCollection?) {
        self.init(named: identifier.rawValue, in: bundle, compatibleWith: traits)
    }
}

extension NSDataAsset {
    
    /// Note that this force unwraps the result
    /// The only case in which this should be nil is if the asset is not in the bundle
    convenience init!(identifier: AssetDataIdentifier) {
        self.init(name: identifier.rawValue)
    }
    convenience init?(identifier: AssetDataIdentifier, bundle: Bundle) {
        self.init(name: identifier.rawValue, bundle: bundle)
    }
}
"""
    }
}
